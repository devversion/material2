name: Deploying dev-app to Firebase previews

on:
  pull_request_target:
    types: [labeled, synchronize]

jobs:
  deploy-dev-app:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'dev-app preview')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          # Cache key. Whenever the postinstall patches change, the cache needs to be invalidated.
          # If just the `yarn.lock` file changes, the most recent cache can be restored though.
          # See: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action.
          key: v2-${{hashFiles('tools/postinstall/apply-patches.js')}}-${{hashFiles('yarn.lock')}}
          restore-keys: v2-${{hashFiles('tools/postinstall/apply-patches.js')}}-

      - run: yarn install --frozen-lockfile --non-interactive
      - run: ./scripts/bazel/setup-remote-execution.sh
        env:
          GCP_DECRYPT_TOKEN: angular

      # Build the web package. Note that we also need to make the Github environment
      # variables available so that the RBE is configured.
      - name: Building dev-app
        run: |
          source ${GITHUB_ENV}
          bazel build //src/dev-app:web_package --symlink_prefix=dist/

      - name: Copying dev-app into Firebase public directory.
        run: |
          mkdir -p dist/dev-app-web-pkg
          cp -R dist/bin/src/dev-app/web_package/* dist/dev-app-web-pkg

      - name: Preparing firebase credentials
        run: |
          echo "${{secrets.FIREBASE_PREVIEW_SERVICE_TOKEN}}" > $HOME/.gcp_service_key
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/.gcp_service_key" > $GITHUB_ENV

      - name: Deploying to Firebase
        id: deploy
        run: |
          source $GITHUB_ENV
          result=$(node ./scripts/deploy-dev-app.js \
            --channelId pr-${{ steps.pr_info.outputs.number }}-${{steps.pr_info.outputs.sha }}
            --project angular-components-test \
            --json)

          echo "::set-output name=data::$result"

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            Deployed dev-app to: ${{ fromJson(steps.deploy.outputs.data).result[0].url }}
