name: Build dev-app

on:
  pull_request:
    types: [synchronize, opened]

jobs:
  dev-app-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Setup cache for node modules.
      - uses: actions/cache@v2
        with:
          path: node_modules/
          # Cache key. Whenever the postinstall patches change, the cache needs to be invalidated.
          # If just the `yarn.lock` file changes, the most recent cache can be restored though.
          # See: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action.
          key: v1-${{hashFiles('tools/postinstall/apply-patches.js')}}-${{hashFiles('yarn.lock')}}
          restore-keys: v1-${{hashFiles('tools/postinstall/apply-patches.js')}}-

      - run: yarn install --frozen-lockfile --non-interactive
      - run: ./scripts/bazel/setup-remote-execution.sh
        env:
          GCP_DECRYPT_TOKEN: angular

      # Build the web package and update the permission so that the folder is writable.
      # Bazel by default marks all generated files as readonly.
      - name: Building dev-app
        run: |
          source $GITHUB_ENV
          bazel build //src/dev-app:web_package --symlink_prefix=dist/

      # Store the pull request number in a file that can be uploaded as
      # workflow artifact. This is needed to read it from the deploy workflow.
      # Note: We update the permission of the web package directory as Bazel marks it
      # as readonly, preventing us from including the PR number file in the web package.
      - run: |
          chmod -r dist/bin/src/dev-app/web_package 644
          echo ${{github.event.pull_request.number}} > dist/bin/src/dev-app/web_package/pr_number

      # Upload the generated dev-app archive.
      - uses: actions/upload-artifact@v2
        with:
          name: devapp
          path: dist/bin/src/dev-app/web_package
